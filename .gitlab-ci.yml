stages:
  - static analysis
  - test
  - package
  - deploy
  
variables:
  TWINE_REPOSITORY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
  
# check the code adheres to the coding standards
static:
  stage: static analysis
  image: python:3.8
  allow_failure: false
  before_script:  # install this project's dependencies using the requirements.txt file
    - pip install --extra-index-url https://gitlab-ci-token:$CI_BUILD_TOKEN@gitlab.esa.int/api/v4/projects/2014/packages/pypi/simple -r requirements.txt
  script:
    - pip install black flake8 isort mypy
    - mypy --ignore-missing-imports pyoptgra/*.py
    - black --check pyoptgra/*.py
    - flake8 --max-line-length 120 --ignore='E203','W503','E123','E704','W504','E126','E226','E121','E24' pyoptgra/*.py
    - isort --check pyoptgra

# check the C++ part compiles and the tests
c++-test:
  stage: test
  image: python:3.8
  allow_failure: false
  before_script:  # install this project's dependencies
    - apt update && apt install gfortran g++ cmake --yes
  script:
    - mkdir build && cd build
    - cmake ..
    - make optgra-test
    - chmod u+x optgra-test
    - ./optgra-test

# check the python code compiles and the tests run
test:
  stage: test
  image: python:3.8
  allow_failure: false
  before_script:  # install this project's dependencies
    - apt update && apt install gfortran --yes
    - pip install -r build-requirements.txt
    - pip install -r requirements.txt
  script:
    - python setup.py install --user
    - pip install pytest-cov coverage
    - cd tests # move into test directory to ensure that the installed package is tested, not the source
    - pytest --cov pyoptgra --cov-report term-missing test.py
    - coverage report --fail-under=100

# check the documentation examples work
doctest:
  stage: test
  image: python:3.8
  allow_failure: false
  before_script:  # install this project's dependencies
    - apt update && apt install gfortran --yes
    - pip install -r build-requirements.txt
    - pip install -r requirements.txt
    - pip install sphinx breathe
  script:
    - python setup.py install --user
    - cd doc/sphinx
    - make doctest

# build the documentation
documentation:
  stage: test
  image: python:3.8
  allow_failure: false
  before_script:  # install this project's dependencies
    - apt update && apt install gfortran doxygen --yes
    - pip install -r build-requirements.txt
    - pip install -r requirements.txt
    - pip install sphinx breathe sphinx-rtd-theme
  script:
    - python setup.py install --user
    - cd doc/doxygen
    - doxygen Doxyfile
    - cd ../sphinx
    - make html
  artifacts:
     paths:
       - doc/sphinx/_build

python-sdist:
  stage: package
  image: python:3.8
  needs: []
  before_script:
    - apt update && apt install gfortran doxygen --yes
    - pip install -r build-requirements.txt
    - pip install -r requirements.txt
  script:
    - python setup.py sdist
    - mv dist/pyoptgra-*.tar.gz .
  artifacts:
    name: python-package
    paths:
      - pyoptgra-*.tar.gz

python-wheels:manylinux2010:
  stage: package
  image: quay.io/pypa/manylinux2010_x86_64:latest
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - apt update && apt install gfortran doxygen --yes
    - pip install -r build-requirements.txt
    - pip install -r requirements.txt
  script:
    - ./tools/build-manylinux-wheels.sh
    - mv /wheelhouse/repaired/*.whl .
  artifacts:
    name: python-wheels-manylinux2010
    paths:
      - pyoptgra-*.whl

test-wheels:
  stage: test
  image: python:3.8
  script:
    - pip install pyoptgra-*-cp38-cp38m-manylinux2010_x86_64.whl
    - python -c "import pyoptgra"
  needs:
    - python-wheels:manylinux2010

publish:
  stage: deploy
  image: python:3.8
  script:
    - pip install twine
    # upload to the project pypi (sdist and whl)
    - twine upload --non-interactive --disable-progress-bar --verbose -u gitlab-ci-token -p $CI_BUILD_TOKEN dist/pyoptgra-*.whl
  needs:
    - python-sdist
    - python-wheels:manylinux2010
  only:
    refs:
      - master

pages:
  stage: deploy
  image: python:3.8
  script:
  - mkdir -p ./public/html/
  - mv ./doc/sphinx/_build/html/* ./public/
  artifacts:
    paths:
    - public
    - doc/sphinx/_build
  only:
    refs:
      - master
    
